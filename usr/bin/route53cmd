#!/bin/bash

# This command supports setting aws route53 records by using the AWS CLI utility
# If the record exists it will delete it and recreate it.
# The command will do nothting if there are no changes to be done.

arg_zone_id=""
arg_name=""
arg_ttl=0
arg_type=""
arg_value=""

arg_option_force=0

current_name=""
current_ttl=0
current_type=""
current_value=""

function print_local_FQDN(){
  hostname -f
}

function print_ec2_hostname(){

  local found_public=0
  local found_private=0
  local ec2_hostname=$(ec2metadata | sed -n -e 's/^public-hostname: \(.*\)$/\1/p')
    if [ "$ec2_hostname" != "" ]; then
      found_public=1
    else
      ec2_hostname=$(ec2metadata | sed -n -e 's/^local-hostname: \(.*\)$/\1/p')
      if [ "$ec2_hostname" != "" ]; then
        found_private=1
      fi
    fi

    if [ $found_public ] ; then
      echo "parsed public-hostname from ec2metadata" >&2
    elif [ $found_private ]; then
      echo "local-hostname parsed from ec2metadata; public-hostname not found" >&2
    else
      echo "no public-hostname or local-hostname found in ec2metadata" >&2
    fi

    if [ $found_public -o $found_private ] ; then
      echo $ec2_hostname
      return 0
    else
      return 1
    fi

}

function print_aws_command(){
  if [ "$FILEPATH_TO_AWSCLI" == "" ]; then
    echo -n "aws"
  else
    echo -n "$FILEPATH_TO_AWSCLI"
  fi
}

function print_current_record(){
  local zone_id=$1
  local name=$2

  json=$($(print_aws_command) route53 list-resource-record-sets  --hosted-zone-id $zone_id --start-record-name  ${name} --max-items 1)

  record_name=$(echo "$json" | sed -n -e 's/^.*"Name": "\([^"]*\)".*$/\1/p')
  match=$(echo "$record_name" | sed -n -e "/${name}/p") 
  if [ "$match" == "" ] ; then
    echo "no record found for $name" >&2  
    return 1
  else
    echo $json
    return 0
  fi
}

function parse_record(){

  local json=$1

  current_name=$(print_sed_from_string "$json" '^.*"Name": "\([^"]*\)".*$' 'current name')
  current_value=$(print_sed_from_string "$json" '^.*"Value": "\([^"]*\)".*$' 'current value')
  current_type=$(print_sed_from_string "$json" '^.*"Type": "\([^"]*\)".*$' 'current type')
  current_ttl=$(print_sed_from_string "$json" '^.*"TTL": \([0-9]*\).*$' 'current ttl')

  return $?
}

function print_sed_from_string() {
  local string=$1
  local regex=$2
  local symbol=$3

  local output=$(echo "$string" | sed -n -e "s/${regex}/\1/p")
  if [ "$output" == "" ]; then
    echo "No ${symbol} found" >&2
    return 1
  else
    echo "${symbol}=${output}" >&2
    echo ${output}
    return 0
  fi

}

function print_2_CHANGES(){

  read -d '' record << EOF
{
  "Changes":
  [
    $1
    ,
    $2
  ]
}
EOF

  echo $record

}
function print_1_CHANGES(){

  read -d '' record << EOF
{
  "Changes":
  [
    $1
  ]
}
EOF

  echo $record

}

function print_DELETE(){

  read -d '' record << EOF
    {
      "Action": "DELETE",
      "ResourceRecordSet":
      {
        "Name": "${current_name}",
        "Type": "${current_type}",
        "TTL": ${current_ttl},
        "ResourceRecords":[
          {
	    "Value": "${current_value}"
	  }
        ]
      }
    }
EOF

  echo $record

}

function print_CREATE(){

  local new_name=$1
  local new_type=$2
  local new_ttl=$3 
  local new_value=$4

  read -d '' record <<EOF
    {
      "Action": "CREATE",
      "ResourceRecordSet":
      {
        "Name": "${new_name}",
        "Type": "${new_type}",
        "TTL": ${new_ttl},
        "ResourceRecords":[
          {
	          "Value": "${new_value}"
		    }
        ]
      }
    }
EOF

  echo $record

}


function get_user_input() {

  local next_is_zone_id=0
  local next_is_name=0
  local next_is_value=0
  local next_is_ttl=0
  local next_is_type=0

  for el in $@; do
    if [[ "$el" == "-h" || "$el" == "--help" ]]; then
      echo "usage -z|--zone-id <zoneid> -n|--name <dns rcord name> -v|--value <dns record value> -t|--type <dns record type> (default A) --ttl <time to live> (default 300) -h|--help (this message) --force"
      exit 0
    elif [[ "$el" == "-z" || "$el" == "--zone-id" ]]; then
      next_is_zone_id=1
    elif [[ "$el" == "-n" || "$el" == "--name" ]]; then
      next_is_name=1
    elif [[ "$el" == "-v" || "$el" == "--value" ]]; then
      next_is_value=1
    elif [[ "$el" == "--force" ]]; then
      arg_option_force=1
    elif [[ "$el" == "-t" || "$el" == "--type" ]]; then
      next_is_type=1
    elif [ "$el" == "--ttl" ]; then
      next_is_ttl=1
    elif [ $next_is_zone_id -eq 1 ]; then
      arg_zone_id=$el
      next_is_zone_id=0
    elif [ $next_is_name -eq 1 ]; then
      arg_name=$el
      next_is_name=0
    elif [ $next_is_type -eq 1 ]; then
      arg_type=$el
      next_is_type=0
    elif [ $next_is_ttl -eq 1 ]; then
      arg_ttl=$el
      next_is_ttl=0
    elif [ $next_is_value -eq 1 ]; then
      arg_value=$el
      next_is_value=0
    fi
  done

  local errors=0

  if [ "$arg_zone_id" == "" ] ; then
    echo "You must specify a zone id: [a-zA-Z0-9]{5,20}"
    echo "E.g.: $(basename $0) --zone-id Z3DQNPKIXZKPS5"
    errors=1
  fi

  if [ "$arg_name" == "" ] ; then
    echo "You must specify a dns name: [a-zA-Z0-9\.]{1,250}"
    echo "E.g.: $(basename $0) --name yourname.yourdomain.com"
    errors=1
  fi

  if [ "$arg_type" == "" ]; then
    arg_type="A"
  fi

  if [ "$arg_ttl" == "0" ]; then
    arg_ttl=300
  fi

  if [ "$arg_value" == "" ] ; then
    echo "You must specify a value: {1,500}"
    echo "E.g.: $(basename $0) --value 10.10.10.10"
    echo "E.g.: $(basename $0) --value ec2-hostname"
    errors=1
  fi


  if [ $errors -eq 1 ]; then
    exit 1
  fi
}

function exit_if_no_change_needed(){

  if [ "$arg_ttl" != "$current_ttl" ]; then
    return
  elif [ "$arg_type" != "$current_type" ]; then
    return
  elif [ "$1" != "$current_value" ]; then
    return
  fi

  if [ $arg_option_force -eq 0 ]; then
    echo "no changes needed on AWS route53"
    exit
  else
    echo "forcing change (no changes needed on AWS route53)" >&1
  fi  
}



function main(){
  local change_batch_filepath=$(tempfile)

  local use_value=${arg_value}
  local use_type=${arg_type}
  if [ "${arg_value}" == "ec2-hostname" ]; then
    use_value=$(print_ec2_hostname)
    if [ $? != 0 ] ; then
      echo "no value to set"
      exit 1
    fi
    
    if [ $use_type != "CNAME" ]; then
      echo "setting type to ${use_type} and value to ${use_value}"
      use_type="CNAME"
    else
      echo "setting value to ${use_value}"
    fi
  fi

  use_name=${arg_name}
  if [ "${arg_name}" == "local-FQDN" ]; then
    use_name=$(print_local_FQDN)
    if [ $? != 0 ] ; then
      echo "no name to set"
      exit 1
    fi
  fi


  local recordjson=$(print_current_record ${arg_zone_id} ${use_name})
  if [ "$recordjson" != "" ] ; then
    parse_record "$recordjson"
    exit_if_no_change_needed $use_value

    print_2_CHANGES "$(print_DELETE)" "$(print_CREATE $current_name ${use_type} ${arg_ttl} ${use_value})" > $change_batch_filepath
  else  
    print_1_CHANGES "$(print_CREATE ${use_name} ${use_type} $arg_ttl ${use_value})" > $change_batch_filepath
  fi

  local aws_command="$(print_aws_command) route53 change-resource-record-sets"
  aws_command="$aws_command --hosted-zone-id ${arg_zone_id}"
  aws_command="$aws_command --change-batch file://${change_batch_filepath}"

  $aws_command
  local ret_aws_command=$?

  if [ $ret_aws_command -eq 0 ]; then
    rm $change_batch_filepath
    return $?
  else
    echo "failed(${ret_aws}): $aws_command" >&2
    return $ret_aws_command
  fi
}

get_user_input $@
main
exit $?
